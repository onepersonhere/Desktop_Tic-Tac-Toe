type: edu
custom_name: Can I have the Menu?
files:
- name: src/tictactoe/ApplicationRunner.java
  visible: true
  text: |
    package tictactoe;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new TicTacToe();
        }
    }
  learner_created: false
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |-
    package tictactoe;

    import javax.swing.*;

    public class TicTacToe extends JFrame {
        public TicTacToe() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JMenuItemFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import tictactoe.TicTacToe;

    import javax.swing.JButton;
    import java.text.MessageFormat;
    import java.text.StringCharacterIterator;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Stream;

    import static java.util.stream.IntStream.range;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class TicTacToeTest extends SwingTest {
        private static final String EMPTY_CELL = " ";
        private static final String MARK_X = "X";
        private static final String MARK_O = "O";
        private static final Map<String, String> GAME_STATE = Map.of(
                "--", "Game is not started",
                "H1", "The turn of Human Player (X)",
                "R1", "The turn of Robot Player (X)",
                "H2", "The turn of Human Player (O)",
                "R2", "The turn of Robot Player (O)",
                "HX", "The Human Player (X) wins",
                "RX", "The Robot Player (X) wins",
                "HO", "The Human Player (O) wins",
                "RO", "The Robot Player (O) wins",
                "DW", "Draw");

        public TicTacToeTest() {
            super(new TicTacToe());
        }

        @SwingComponent
        private JButtonFixture buttonA1;
        @SwingComponent
        private JButtonFixture buttonA2;
        @SwingComponent
        private JButtonFixture buttonA3;
        @SwingComponent
        private JButtonFixture buttonB1;
        @SwingComponent
        private JButtonFixture buttonB2;
        @SwingComponent
        private JButtonFixture buttonB3;
        @SwingComponent
        private JButtonFixture buttonC1;
        @SwingComponent
        private JButtonFixture buttonC2;
        @SwingComponent
        private JButtonFixture buttonC3;
        @SwingComponent
        private JButtonFixture buttonStartReset;
        @SwingComponent
        private JButtonFixture buttonPlayer1;
        @SwingComponent
        private JButtonFixture buttonPlayer2;
        @SwingComponent
        private JLabelFixture labelStatus;
        @SwingComponent
        private JMenuItemFixture menuGame;
        @SwingComponent
        private JMenuItemFixture menuHumanHuman;
        @SwingComponent
        private JMenuItemFixture menuHumanRobot;
        @SwingComponent
        private JMenuItemFixture menuRobotHuman;
        @SwingComponent
        private JMenuItemFixture menuRobotRobot;
        @SwingComponent
        private JMenuItemFixture menuExit;

        private Stream<JButtonFixture> cells() {
            return Stream.of(
                    buttonA3, buttonB3, buttonC3,
                    buttonA2, buttonB2, buttonC2,
                    buttonA1, buttonB1, buttonC1
            );
        }

        private Map<String, JButtonFixture> board;

        private final List<JButton> buttons = new ArrayList<>();

        @DynamicTest(feedback = "Cells should be visible")
        CheckResult test1() {
            cells().forEach(this::requireVisible);
            cells().map(JButtonFixture::target).forEach(buttons::add);
            board = Map.of(
                    "A3", buttonA3, "B3", buttonB3, "C3", buttonC3,
                    "A2", buttonA2, "B2", buttonB2, "C2", buttonC2,
                    "A1", buttonA1, "B1", buttonB1, "C1", buttonC1,
                    "SR", buttonStartReset);
            return correct();
        }

        @DynamicTest(feedback = "Cells should be disabled before the start of the game")
        CheckResult test2() {
            cells().forEach(this::requireDisabled);
            return correct();
        }

        @DynamicTest(feedback = "All cells should be empty before the game")
        CheckResult test3() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            return correct();
        }

        private int[] cols;
        private int[] rows;

        @DynamicTest(feedback = "The board should have exactly three rows and columns")
        CheckResult test4() {
            cols = buttons.stream().mapToInt(JButton::getX).distinct().sorted().toArray();
            rows = buttons.stream().mapToInt(JButton::getY).distinct().sorted().toArray();

            assertEquals(3, cols.length,
                    "The board should have exactly 3 columns. "
                            + "The column coordinates are {0}, "
                            + "the buttons have {1} different column coordinates",
                    Arrays.toString(cols), cols.length);

            assertEquals(3, rows.length,
                    "The board should have exactly 3 rows. "
                            + "The row coordinates are {0}, "
                            + "The buttons have {0} different row coordinates",
                    Arrays.toString(rows), rows.length);

            return correct();
        }

        private static final String[] ROW_NAME = new String[]{"top", "middle", "bottom"};
        private static final String[] COL_NAME = new String[]{"left", "middle", "right"};

        @DynamicTest(feedback = "The buttons are incorrectly placed on the board")
        CheckResult test5() {
            range(0, 9).forEach(index -> {

                assertEquals(rows[index / 3], buttons.get(index).getY(),
                        "The button {0} should be located in the {1} row",
                        buttons.get(index).getText(), ROW_NAME[index / 3]);

                assertEquals(cols[index % 3], buttons.get(index).getX(),
                        "The button {0} should be located in the {1} column",
                        buttons.get(index).getText(), COL_NAME[index % 3]);
            });

            return correct();
        }

        @DynamicTest(feedback = "Add a JLabel with the name of 'LabelStatus' as status bar")
        CheckResult test6() {
            labelStatus.requireVisible();
            return correct();
        }

        @DynamicTest(feedback = "The status bar should contain the following text: 'Game is not started' before the game")
        CheckResult test7() {
            labelStatus.requireText(GAME_STATE.get("--"));
            return correct();
        }

        @DynamicTest(feedback = "Add a JButton with the name of 'ButtonStartReset' and enable it")
        CheckResult test8() {
            buttonStartReset.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The 'ButtonStartReset' component should have the following text: 'Start' after the program starts")
        CheckResult test9() {
            buttonStartReset.requireText("Start");
            return correct();
        }

        @DynamicTest(feedback = "Once the game is started, change the 'Start' button to 'Reset'")
        CheckResult test10() {
            buttonStartReset.click();
            buttonStartReset.requireText("Reset");
            return correct();
        }

        @DynamicTest(feedback = "Cells should be enabled after the game is started")
        CheckResult test12() {
            cells().forEach(this::requireEnabled);
            return correct();
        }

        @DynamicTest(feedback = "Once the game is started, the status should indicate the first player turn")
        CheckResult test13() {
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "Disable player buttons once the game has started." +
                " Expected text: 'The turn of Human Player (X)'")
        CheckResult test14() {
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            return correct();
        }

        @DynamicTest(feedback = "Display 'X' after the first move" +
                " and the status should indicate the turn of the second player")
        CheckResult test15() {
            buttonA1.click();
            buttonA1.requireText(MARK_X);
            labelStatus.requireText(GAME_STATE.get("H2"));
            return correct();
        }

        @DynamicTest(feedback = "Display 'O' after the second move" +
                " and the status should indicate the turn of the first player")
        CheckResult test16() {
            buttonA3.click();
            buttonA3.requireText(MARK_O);
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "The Reset button should finish the game " +
                "enable player buttons")
        CheckResult test17() {
            buttonStartReset.click();
            buttonPlayer1.requireEnabled();
            buttonPlayer2.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The Reset button should clear the board" +
                " and the status should indicate 'The game is not started'")
        CheckResult test19() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            labelStatus.requireText(GAME_STATE.get("--"));
            return correct();
        }

        private final String[][] humanVsHuman = new String[][]{
                {"SR", "_________", "H1"},
                {"A1", "______X__", "H2"}, {"B1", "______XO_", "H1"},
                {"C3", "__X___XO_", "H2"}, {"B3", "_OX___XO_", "H1"},
                {"B2", "_OX_X_XO_", "HX"}, {"SR", "_________", "--"},

                {"SR", "_________", "H1"},
                {"B2", "____X____", "H2"}, {"A1", "____X_O__", "H1"},
                {"C1", "____X_O_X", "H2"}, {"A3", "O___X_O_X", "H1"},
                {"A2", "O__XX_O_X", "H2"}, {"C2", "O__XXOO_X", "H1"},
                {"B3", "OX_XXOO_X", "H2"}, {"B1", "OX_XXOOOX", "H1"},
                {"C3", "OXXXXOOOX", "DW"}, {"B2", "OXXXXOOOX", "DW"},
                {"B2", "OXXXXOOOX", "DW"}, {"SR", "_________", "--"},

                {"SR", "_________", "H1"},
                {"A2", "___X_____", "H2"}, {"B2", "___XO____", "H1"},
                {"A1", "___XO_X__", "H2"}, {"A3", "O__XO_X__", "H1"},
                {"C1", "O__XO_X_X", "H2"}, {"B1", "O__XO_XOX", "H1"},
                {"C2", "O__XOXXOX", "H2"}, {"B3", "OO_XOXXOX", "HO"},
                {"A3", "OO_XOXXOX", "HO"}, {"C3", "OO_XOXXOX", "HO"},
                {"C3", "OO_XOXXOX", "HO"}, {"B2", "OO_XOXXOX", "HO"},
                {"SR", "_________", "--"}, {"SR", "_________", "H1"},
                {"SR", "_________", "--"}, {"SR", "_________", "H1"},

                {"C1", "________X", "H2"}, {"B1", "_______OX", "H1"},
                {"B2", "____X__OX", "H2"}, {"C2", "____XO_OX", "H1"},
                {"A3", "X___XO_OX", "HX"}, {"B3", "X___XO_OX", "HX"},
                {"C3", "X___XO_OX", "HX"}, {"A1", "X___XO_OX", "HX"},
                {"A1", "X___XO_OX", "HX"}, {"SR", "_________", "--"},

                // Test for double click on the same cells
                {"SR", "_________", "H1"},
                {"B2", "____X____", "H2"}, {"B2", "____X____", "H2"},
                {"B2", "____X____", "H2"}, {"C1", "____X___O", "H1"},
                {"C1", "____X___O", "H1"}, {"C1", "____X___O", "H1"},
                {"SR", "_________", "--"},

        };

        @DynamicTest(data = "humanVsHuman", feedback = "Incorrect game state")
        CheckResult test20(final String cell, final String position, final String state) {
            board.get(cell).click();
            labelStatus.requireText(GAME_STATE.get(state));
            final var iter = new StringCharacterIterator(" " + position.replace('_', ' '));
            cells().forEach(c -> c.requireText(String.valueOf(iter.next())));
            return correct();
        }


        @DynamicTest(feedback = "The player buttons should be Human vs Human")
        CheckResult test30() {
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Human");
            return correct();
        }

        @DynamicTest(feedback = "The player buttons should switch Human/Robot")
        CheckResult test40() {
            buttonPlayer1.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer1.click();
            buttonPlayer1.requireText("Human");

            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Human");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Human vs Human', the game should start. " +
                "Both buttons should be set to 'Human' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled. " +
                "The status should indicate the first human player turn.")
        CheckResult test50() {
            menuHumanHuman.requireEnabled();
            menuHumanHuman.requireVisible();
            menuHumanHuman.click();
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Human");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            cells().forEach(this::requireEnabled);
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Human vs Robot', the game should start. " +
                "The first player button should be set to 'Human' and disabled. " +
                "The second player button should be set to 'Robot' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled. " +
                "The status should indicate the first human player turn.")
        CheckResult test60() {
            menuHumanRobot.requireEnabled();
            menuHumanRobot.requireVisible();
            menuHumanRobot.click();
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Robot");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            cells().forEach(this::requireEnabled);
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Human vs Robot', the game should start. " +
                "The first player button should be set to 'Robot' and disabled. " +
                "The second player button should be set to 'Human' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled.")
        CheckResult test70() {
            menuRobotHuman.requireEnabled();
            menuRobotHuman.requireVisible();
            menuRobotHuman.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer2.requireText("Human");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            cells().forEach(this::requireEnabled);
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Robot vs Robot', the game should start. " +
                "Both player's buttons should be set to 'Robot' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled.")
        CheckResult test80() {
            menuRobotRobot.requireEnabled();
            menuRobotRobot.requireVisible();
            menuRobotRobot.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer2.requireText("Robot");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            return correct();
        }

        private static void assertEquals(
                final Object expected,
                final Object actual,
                final String error,
                final Object... args) {

            if (!expected.equals(actual)) {
                final var feedback = MessageFormat.format(error, args);
                throw new WrongAnswer(feedback);
            }
        }
    }
  learner_created: false
- name: src/tictactoe/Count.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;

    public class Count {
        private static int count = 0;

        public static int getCount() {
            return count;
        }

        public static void setCount(int count) {
            Count.count = count;
        }

        public static void addCount(){
            JLabel status = Status.getStatus();
            Board p = TicTacToe.getP();
            Count.count += 1;
            System.out.println(count);
            if(count >= 9){
                status.setText("Draw");
            }
        }
    }
  learner_created: true
- name: src/tictactoe/EasyAI.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.util.concurrent.TimeUnit;

    public class EasyAI {
        public EasyAI(){
            //generates & changes coords Symbol based on coords
            //uses get"Button" and set"Button"
            //check status after every move
        }
        public static void opponentAI(String symbol){
            AI(symbol);
            Button.checkStatus();
        }
        //includes count
        public static void AIvsAI(){
            JLabel status = Status.getStatus();
            while(status.getText().equals("Game in progress")) {
                if(Count.getCount() % 2 == 0) {
                    EasyAI.opponentAI("X");
                    Count.addCount();
                    Button.checkStatus();
                }else {
                    EasyAI.opponentAI("O");
                    Count.addCount();
                    Button.checkStatus();
                }
            }
        }
        private static void AI(String symbol){
            Board p = TicTacToe.getP();
            int cell = (int)(Math.random() * 9 + 1);
            if(cell == 1){
                if(p.getA1().equals(" ")){
                    p.setA1(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 2){
                if(p.getA2().equals(" ")){
                    p.setA2(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 3){
                if(p.getA3().equals(" ")){
                    p.setA3(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 4){
                if(p.getB1().equals(" ")){
                    p.setB1(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 5){
                if(p.getB2().equals(" ")){
                    p.setB2(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 6){
                if(p.getB3().equals(" ")){
                    p.setB3(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 7){
                if(p.getC1().equals(" ")){
                    p.setC1(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 8){
                if(p.getC2().equals(" ")){
                    p.setC2(symbol);
                }else{
                    AI(symbol);
                }
            }
            if(cell == 9){
                if(p.getC3().equals(" ")){
                    p.setC3(symbol);
                }else{
                    AI(symbol);
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;

    public class Board extends JPanel {

        private Button a1 = new Button("ButtonA1", "A1");
        private Button a2 = new Button("ButtonA2", "A2");
        private Button a3 = new Button("ButtonA3", "A3");
        private Button b1 = new Button("ButtonB1", "B1");
        private Button b2 = new Button("ButtonB2", "B2");
        private Button b3 = new Button("ButtonB3", "B3");
        private Button c1 = new Button("ButtonC1", "C1");
        private Button c2 = new Button("ButtonC2", "C2");
        private Button c3 = new Button("ButtonC3", "C3");

        public Board() {
            setLayout(new GridLayout(3,3));
            setPreferredSize(new Dimension(600,600));
            //setBackground(Color.GREEN);
            cells();
        }
        private void cells(){
            add(a3);add(b3);add(c3);
            add(a2);add(b2);add(c2);
            add(a1);add(b1);add(c1);
        }
        public void RESET(){
            a1.resetText();
            a2.resetText();
            a3.resetText();
            b1.resetText();
            b2.resetText();
            b3.resetText();
            c1.resetText();
            c2.resetText();
            c3.resetText();
        }
        public void DISABLEALL(){
            a1.setEnabled(false);
            a2.setEnabled(false);
            a3.setEnabled(false);
            b1.setEnabled(false);
            b2.setEnabled(false);
            b3.setEnabled(false);
            c1.setEnabled(false);
            c2.setEnabled(false);
            c3.setEnabled(false);
        }
        public void ENABLE(){
            a1.setEnabled(true);
            a2.setEnabled(true);
            a3.setEnabled(true);
            b1.setEnabled(true);
            b2.setEnabled(true);
            b3.setEnabled(true);
            c1.setEnabled(true);
            c2.setEnabled(true);
            c3.setEnabled(true);
        }
        public String getA1() {
            return a1.getText();
        }

        public String getA2() {
            return a2.getText();
        }

        public String getA3() {
            return a3.getText();
        }

        public String getB1() {
            return b1.getText();
        }

        public String getB2() {
            return b2.getText();
        }

        public String getB3() {
            return b3.getText();
        }

        public String getC1() {
            return c1.getText();
        }

        public String getC2() {
            return c2.getText();
        }

        public String getC3() {
            return c3.getText();
        }

        public void setA1(String text) {
            a1.setText(text);
        }

        public void setA2(String text) {
            a2.setText(text);
        }

        public void setA3(String text) {
            a3.setText(text);
        }

        public void setB1(String text) {
            b1.setText(text);
        }

        public void setB2(String text) {
            b2.setText(text);
        }

        public void setB3(String text) {
            b3.setText(text);
        }

        public void setC1(String text) {
            c1.setText(text);
        }

        public void setC2(String text) {
            c2.setText(text);
        }

        public void setC3(String text) {
            c3.setText(text);
        }
    }
  learner_created: true
- name: src/tictactoe/Button.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

    public class Button extends JButton {
        private static boolean aiPlays = false;
        private static String aiSymbol;
        public Button(String buttonName, String coord){
            setName(buttonName);
            setFocusPainted(false);
            setText(" ");
            setFont(new Font("Arial", Font.BOLD, 80));

            addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    //change this part to correspond to the count
                    int count = Count.getCount();
                    if(getText().equals(" ") && count % 2 == 0) {
                        setText("X");
                        checkStatus();
                        Count.addCount();
                        opponent();
                    }
                    if(getText().equals(" ") && count % 2 != 0){
                        setText("O");
                        checkStatus();
                        Count.addCount();
                        opponent();
                    }

                }
            });
        }
        private void opponent(){
            //opponent(AI)
            if(aiPlays && aiSymbol.equals("X")){
                EasyAI.opponentAI("X");
                checkStatus();
                Count.addCount();
            }
            if(aiPlays && aiSymbol.equals("O")){
                EasyAI.opponentAI("O");
                checkStatus();
                Count.addCount();
            }
        }

        public static void setAiPlays(boolean aiPlays, String aiSymbol) {
            Button.aiPlays = aiPlays;
            Button.aiSymbol = aiSymbol;
        }

        //check if win
        public static void checkStatus(){
            JLabel status = Status.getStatus();
            Board p = TicTacToe.getP();

            status.setText("Game in progress");
            if(p.getA1().equals(p.getA2()) && p.getA2().equals(p.getA3())){
                if(p.getA1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getB1().equals(p.getB2()) && p.getB2().equals(p.getB3())){
                if(p.getB1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getB1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getC1().equals(p.getC2()) && p.getC2().equals(p.getC3())){
                if(p.getC1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getC1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA1().equals(p.getB1()) && p.getB1().equals(p.getC1())){
                if(p.getA1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA2().equals(p.getB2()) && p.getB2().equals(p.getC2())){
                if(p.getA2().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA2().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA3().equals(p.getB3()) && p.getB3().equals(p.getC3())){
                if(p.getA3().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA3().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA1().equals(p.getB2()) && p.getB2().equals(p.getC3())){
                if(p.getA1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA3().equals(p.getB2()) && p.getB2().equals(p.getC1())){
                if(p.getA3().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA3().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
        }
        public void resetText(){
            setText(" ");
        }
    }
  learner_created: true
- name: src/tictactoe/Status.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

    public class Status extends JPanel {
        private static JLabel status = new JLabel();

        public Status(){
            setPreferredSize(new Dimension(600,35));
            setBackground(Color.GREEN);

            setLayout(new FlowLayout(FlowLayout.LEADING));


            String statustxt = "Game is not started";
            status(status, statustxt);
            add(status);

        }

        private void status(JLabel status, String statustxt){
            status.setName("LabelStatus");
            status.setText(statustxt);
            status.setBounds(2, 0, 100, 30);
        }

        public static JLabel getStatus() {
            return status;
        }

    }
  learner_created: true
- name: src/tictactoe/ControlPanel.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

    public class ControlPanel extends JPanel {
        private static int player1Count = 0;
        private static int player2Count = 0;
        private static int startResetCount = 0;
        private JButton player1 = new JButton();
        private JButton player2 = new JButton();

        public ControlPanel(){
            setPreferredSize(new Dimension(600,35));
            setLayout(new GridLayout(1,3));

            player1.setName("ButtonPlayer1");
            player1.setFocusPainted(false);
            player1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    player1Count++;
                    choosePlayer(player1, player1Count);

                }
            });
            choosePlayer(player1, player1Count);
            add(player1); //count starts from 0 aka X

            JButton startReset = new JButton();
            startReset.setName("ButtonStartReset");
            startReset.setFocusPainted(false);
            startReset.setText("Start");
            startReset.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    startReset(startReset);
                    startResetCount++;
                    if(player1.getText().equals("Robot") && player2.getText().equals("Robot")){
                        Board p = TicTacToe.getP();
                        p.DISABLEALL();

                        EasyAI.AIvsAI();

                    }
                    else if(player1.getText().equals("Robot")){
                        EasyAI.opponentAI("X");
                        Count.addCount();
                    }

                }
            });
            add(startReset);

            player2.setName("ButtonPlayer2");
            player2.setFocusPainted(false);
            player2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    player2Count++;
                    choosePlayer(player2, player2Count);
                }
            });
            choosePlayer(player2, player2Count);
            add(player2); //count starts from 1 aka O


        }

        private void choosePlayer(JButton player, int playerCount){
            if(playerCount % 2 == 0){
                player.setText("Human");
                humanPlays(player.getName());
            }else{
                player.setText("Robot");
                computerPlays(player.getName());
            }
        }
        private void startReset(JButton startReset){
            JLabel status = Status.getStatus();
            Board p = TicTacToe.getP();
            if(startResetCount % 2 != 0) {
                //When reset
                Count.setCount(0);
                player1.setEnabled(true);
                player2.setEnabled(true);
                player1Count = 0;
                player2Count = 0;
                startReset.setText("Start");
                player1.setText("Human");
                player2.setText("Human");
                Button.setAiPlays(false, " ");
                p.RESET();
                status.setText("Game is not started");
            }else{
                //when start
                player1.setEnabled(false);
                player2.setEnabled(false);
                p.ENABLE();
                startReset.setText("Reset");
                status.setText("Game in progress");
            }
        }

        public void computerPlays(String playerName){
            //for 1 AI
            if(playerName.equals("ButtonPlayer1")){
                Button.setAiPlays(true, "X");
            }
            if(playerName.equals("ButtonPlayer2")){
                Button.setAiPlays(true, "O");
            }
        }
        public void humanPlays(String playerName){
            if(playerName.equals("ButtonPlayer1")){
                Button.setAiPlays(false, "O");
            }
            if(playerName.equals("ButtonPlayer2")){
                Button.setAiPlays(false, "X");
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/174/stages/900/implement#comment
status: Unchecked
record: -1
