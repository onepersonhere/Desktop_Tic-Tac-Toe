type: edu
files:
- name: src/tictactoe/ApplicationRunner.java
  visible: true
  text: |
    package tictactoe;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new TicTacToe();
        }
    }
  learner_created: false
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |-
    package tictactoe;

    import javax.swing.*;

    public class TicTacToe extends JFrame {
        public TicTacToe() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import tictactoe.TicTacToe;

    import javax.swing.JButton;
    import java.text.MessageFormat;
    import java.text.StringCharacterIterator;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Stream;

    import static java.util.stream.IntStream.range;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class TicTacToeTest extends SwingTest {
        private static final String EMPTY_CELL = " ";
        private static final String MARK_X = "X";
        private static final String MARK_O = "O";
        private static final Map<String, String> GAME_STATE = Map.of(
                "E", "Game is not started",
                "P", "Game in progress",
                "X", "X wins",
                "O", "O wins",
                "D", "Draw");

        public TicTacToeTest() {
            super(new TicTacToe());
        }

        @SwingComponent
        private JButtonFixture buttonA1;
        @SwingComponent
        private JButtonFixture buttonA2;
        @SwingComponent
        private JButtonFixture buttonA3;
        @SwingComponent
        private JButtonFixture buttonB1;
        @SwingComponent
        private JButtonFixture buttonB2;
        @SwingComponent
        private JButtonFixture buttonB3;
        @SwingComponent
        private JButtonFixture buttonC1;
        @SwingComponent
        private JButtonFixture buttonC2;
        @SwingComponent
        private JButtonFixture buttonC3;
        @SwingComponent
        private JButtonFixture buttonStartReset;
        @SwingComponent
        private JButtonFixture buttonPlayer1;
        @SwingComponent
        private JButtonFixture buttonPlayer2;
        @SwingComponent
        private JLabelFixture labelStatus;

        private Stream<JButtonFixture> cells() {
            return Stream.of(
                    buttonA3, buttonB3, buttonC3,
                    buttonA2, buttonB2, buttonC2,
                    buttonA1, buttonB1, buttonC1
            );
        }

        private Map<String, JButtonFixture> board;

        private final List<JButton> buttons = new ArrayList<>();

        @DynamicTest(feedback = "Cells should be visible")
        CheckResult test1() {
            cells().forEach(this::requireVisible);
            cells().map(JButtonFixture::target).forEach(buttons::add);
            board = Map.of(
                    "A3", buttonA3, "B3", buttonB3, "C3", buttonC3,
                    "A2", buttonA2, "B2", buttonB2, "C2", buttonC2,
                    "A1", buttonA1, "B1", buttonB1, "C1", buttonC1,
                    "SR", buttonStartReset);
            return correct();
        }

        @DynamicTest(feedback = "Cells should be disabled before the start of the game")
        CheckResult test2() {
            cells().forEach(this::requireDisabled);
            return correct();
        }

        @DynamicTest(feedback = "All cells should be empty before the game")
        CheckResult test3() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            return correct();
        }

        private int[] cols;
        private int[] rows;

        @DynamicTest(feedback = "The board should have exactly three rows and columns")
        CheckResult test4() {
            cols = buttons.stream().mapToInt(JButton::getX).distinct().sorted().toArray();
            rows = buttons.stream().mapToInt(JButton::getY).distinct().sorted().toArray();

            assertEquals(3, cols.length,
                    "The board should have exactly 3 columns. "
                            + "The column coordinates are {0}, "
                            + "the buttons have {1} different column coordinates",
                    Arrays.toString(cols), cols.length);

            assertEquals(3, rows.length,
                    "The board should have exactly 3 rows. "
                            + "The row coordinates are {0}, "
                            + "The buttons have {0} different row coordinates",
                    Arrays.toString(rows), rows.length);

            return correct();
        }

        private static final String[] ROW_NAME = new String[]{"top", "middle", "bottom"};
        private static final String[] COL_NAME = new String[]{"left", "middle", "right"};

        @DynamicTest(feedback = "The buttons are incorrectly placed on the board")
        CheckResult test5() {
            range(0, 9).forEach(index -> {

                assertEquals(rows[index / 3], buttons.get(index).getY(),
                        "The button {0} should be located in the {1} row",
                        buttons.get(index).getText(), ROW_NAME[index / 3]);

                assertEquals(cols[index % 3], buttons.get(index).getX(),
                        "The button {0} should be located in the {1} column",
                        buttons.get(index).getText(), COL_NAME[index % 3]);
            });

            return correct();
        }

        @DynamicTest(feedback = "Add a JLabel with the name of 'LabelStatus' as status bar")
        CheckResult test6() {
            labelStatus.requireVisible();
            return correct();
        }

        @DynamicTest(feedback = "The status bar should contain the following text: 'Game is not started' before the game")
        CheckResult test7() {
            labelStatus.requireText(GAME_STATE.get("E"));
            return correct();
        }

        @DynamicTest(feedback = "Add a JButton with the name of 'ButtonStartReset' and enable it")
        CheckResult test8() {
            buttonStartReset.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The 'ButtonStartReset' component should have the following text: 'Start' after the program starts")
        CheckResult test9() {
            buttonStartReset.requireText("Start");
            return correct();
        }

        @DynamicTest(feedback = "After a click, 'Start' should be changed to 'Reset'")
        CheckResult test10() {
            buttonStartReset.click();
            buttonStartReset.requireText("Reset");
            return correct();
        }

        @DynamicTest(feedback = "Cells should be enabled after the game started")
        CheckResult test12() {
            cells().forEach(this::requireEnabled);
            return correct();
        }

        @DynamicTest(feedback = "After the game has started, display the 'Game in progress' status")
        CheckResult test13() {
            labelStatus.requireText(GAME_STATE.get("P"));
            return correct();
        }

        @DynamicTest(feedback = "Disable player buttons after the start of the game")
        CheckResult test14() {
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            return correct();
        }

        @DynamicTest(feedback = "The first player should be 'X', the second â€” 'O'")
        CheckResult test15() {
            buttonA1.click();
            buttonA1.requireText(MARK_X);
            buttonA3.click();
            buttonA3.requireText(MARK_O);
            return correct();
        }

        @DynamicTest(feedback = "Enable player buttons after the game is over or the 'Reset' button is pressed" +
                "Enable player buttons")
        CheckResult test16() {
            buttonStartReset.click();
            buttonPlayer1.requireEnabled();
            buttonPlayer2.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The 'Reset' button should clear the board" +
                " and status should indicate 'The game is not started'")
        CheckResult test18() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            labelStatus.requireText(GAME_STATE.get("E"));
            return correct();
        }

        private final String[][] humanVsHuman = new String[][]{
                {"SR", "_________", "P"},
                {"A1", "______X__", "P"}, {"B1", "______XO_", "P"},
                {"C3", "__X___XO_", "P"}, {"B3", "_OX___XO_", "P"},
                {"B2", "_OX_X_XO_", "X"}, {"SR", "_________", "E"},

                {"SR", "_________", "P"},
                {"B2", "____X____", "P"}, {"A1", "____X_O__", "P"},
                {"C1", "____X_O_X", "P"}, {"A3", "O___X_O_X", "P"},
                {"A2", "O__XX_O_X", "P"}, {"C2", "O__XXOO_X", "P"},
                {"B3", "OX_XXOO_X", "P"}, {"B1", "OX_XXOOOX", "P"},
                {"C3", "OXXXXOOOX", "D"}, {"B2", "OXXXXOOOX", "D"},
                {"B2", "OXXXXOOOX", "D"}, {"SR", "_________", "E"},

                {"SR", "_________", "P"},
                {"A2", "___X_____", "P"}, {"B2", "___XO____", "P"},
                {"A1", "___XO_X__", "P"}, {"A3", "O__XO_X__", "P"},
                {"C1", "O__XO_X_X", "P"}, {"B1", "O__XO_XOX", "P"},
                {"C2", "O__XOXXOX", "P"}, {"B3", "OO_XOXXOX", "O"},
                {"A3", "OO_XOXXOX", "O"}, {"C3", "OO_XOXXOX", "O"},
                {"C3", "OO_XOXXOX", "O"}, {"B2", "OO_XOXXOX", "O"},
                {"SR", "_________", "E"}, {"SR", "_________", "P"},
                {"SR", "_________", "E"}, {"SR", "_________", "P"},

                {"C1", "________X", "P"}, {"B1", "_______OX", "P"},
                {"B2", "____X__OX", "P"}, {"C2", "____XO_OX", "P"},
                {"A3", "X___XO_OX", "X"}, {"B3", "X___XO_OX", "X"},
                {"C3", "X___XO_OX", "X"}, {"A1", "X___XO_OX", "X"},
                {"A1", "X___XO_OX", "X"}, {"SR", "_________", "E"},
        };

        @DynamicTest(data = "humanVsHuman", feedback = "Incorrect game status")
        CheckResult test20(final String cell, final String position, final String state) {
            board.get(cell).click();
            labelStatus.requireText(GAME_STATE.get(state));
            final var iter = new StringCharacterIterator(" " + position.replace('_', ' '));
            cells().forEach(c -> c.requireText(String.valueOf(iter.next())));
            return correct();
        }


        @DynamicTest(feedback = "The player buttons should be Human vs Human")
        CheckResult test30() {
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Human");
            return correct();
        }

        @DynamicTest(feedback = "The player buttons should switch Human/Robot")
        CheckResult test40() {
            buttonPlayer1.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer1.click();
            buttonPlayer1.requireText("Human");

            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Human");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            return correct();
        }


        private static void assertEquals(
                final Object expected,
                final Object actual,
                final String error,
                final Object... args) {

            if (!expected.equals(actual)) {
                final var feedback = MessageFormat.format(error, args);
                throw new WrongAnswer(feedback);
            }
        }
    }
  learner_created: false
- name: src/tictactoe/Count.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;

    public class Count {
        private static int count = 0;

        public static int getCount() {
            return count;
        }

        public static void setCount(int count) {
            Count.count = count;
        }

        public static void addCount(){
            JLabel status = Status.getStatus();
            Board p = TicTacToe.getP();

            Count.count += 1;
            if(count == 9){
                status.setText("Draw");
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;

    public class Board extends JPanel {

        private Button a1 = new Button("ButtonA1", "A1");
        private Button a2 = new Button("ButtonA2", "A2");
        private Button a3 = new Button("ButtonA3", "A3");
        private Button b1 = new Button("ButtonB1", "B1");
        private Button b2 = new Button("ButtonB2", "B2");
        private Button b3 = new Button("ButtonB3", "B3");
        private Button c1 = new Button("ButtonC1", "C1");
        private Button c2 = new Button("ButtonC2", "C2");
        private Button c3 = new Button("ButtonC3", "C3");

        public Board() {
            setLayout(new GridLayout(3,3));
            setPreferredSize(new Dimension(600,600));
            //setBackground(Color.GREEN);
            cells();
        }
        private void cells(){
            add(a3);add(b3);add(c3);
            add(a2);add(b2);add(c2);
            add(a1);add(b1);add(c1);
        }
        public void RESET(){
            a1.resetText();
            a2.resetText();
            a3.resetText();
            b1.resetText();
            b2.resetText();
            b3.resetText();
            c1.resetText();
            c2.resetText();
            c3.resetText();
        }
        public void DISABLEALL(){
            a1.setEnabled(false);
            a2.setEnabled(false);
            a3.setEnabled(false);
            b1.setEnabled(false);
            b2.setEnabled(false);
            b3.setEnabled(false);
            c1.setEnabled(false);
            c2.setEnabled(false);
            c3.setEnabled(false);
        }
        public void DISABLEOCUPPIED(){
            if(!a1.getText().equals(" ")){
                a1.setEnabled(false);
            }
            if(!a2.getText().equals(" ")){
                a2.setEnabled(false);
            }
            if(!a3.getText().equals(" ")){
                a3.setEnabled(false);
            }
            if(!b1.getText().equals(" ")){
                b1.setEnabled(false);
            }
            if(!b2.getText().equals(" ")){
                b2.setEnabled(false);
            }
            if(!b3.getText().equals(" ")){
                b3.setEnabled(false);
            }
            if(!c1.getText().equals(" ")){
                c1.setEnabled(false);
            }
            if(!c2.getText().equals(" ")){
                c2.setEnabled(false);
            }
            if(!c3.getText().equals(" ")){
                c3.setEnabled(false);
            }

        }
        public void ENABLE(){
            a1.setEnabled(true);
            a2.setEnabled(true);
            a3.setEnabled(true);
            b1.setEnabled(true);
            b2.setEnabled(true);
            b3.setEnabled(true);
            c1.setEnabled(true);
            c2.setEnabled(true);
            c3.setEnabled(true);
        }
        public String getA1() {
            return a1.getText();
        }

        public String getA2() {
            return a2.getText();
        }

        public String getA3() {
            return a3.getText();
        }

        public String getB1() {
            return b1.getText();
        }

        public String getB2() {
            return b2.getText();
        }

        public String getB3() {
            return b3.getText();
        }

        public String getC1() {
            return c1.getText();
        }

        public String getC2() {
            return c2.getText();
        }

        public String getC3() {
            return c3.getText();
        }
    }
  learner_created: true
- name: src/tictactoe/Button.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

    public class Button extends JButton {
        public Button(String buttonName, String coord){
            setName(buttonName);
            setFocusPainted(false);
            setText(" ");
            setFont(new Font("Arial", Font.BOLD, 80));

            addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    //change this part to correspond to the count
                    int count = Count.getCount();
                    if(getText().equals(" ") && count % 2 == 0) {
                        setText("X");
                        checkStatus();
                        Count.addCount();
                    }
                    if(getText().equals(" ") && count % 2 != 0){
                        setText("O");
                        checkStatus();
                        Count.addCount();
                    }
                }
            });
        }
        private void checkStatus(){
            JLabel status = Status.getStatus();
            Board p = TicTacToe.getP();

            status.setText("Game in progress");
            if(p.getA1().equals(p.getA2()) && p.getA2().equals(p.getA3())){
                if(p.getA1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getB1().equals(p.getB2()) && p.getB2().equals(p.getB3())){
                if(p.getB1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getB1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getC1().equals(p.getC2()) && p.getC2().equals(p.getC3())){
                if(p.getC1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getC1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA1().equals(p.getB1()) && p.getB1().equals(p.getC1())){
                if(p.getA1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA2().equals(p.getB2()) && p.getB2().equals(p.getC2())){
                if(p.getA2().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA2().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA3().equals(p.getB3()) && p.getB3().equals(p.getC3())){
                if(p.getA3().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA3().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA1().equals(p.getB2()) && p.getB2().equals(p.getC3())){
                if(p.getA1().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA1().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
            if(p.getA3().equals(p.getB2()) && p.getB2().equals(p.getC1())){
                if(p.getA3().equals("X")) {
                    status.setText("X wins");
                    p.DISABLEALL();
                }
                if(p.getA3().equals("O")){
                    status.setText("O wins");
                    p.DISABLEALL();
                }
            }
        }
        public void resetText(){
            setText(" ");
        }
    }
  learner_created: true
- name: src/tictactoe/Status.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

    public class Status extends JPanel {
        private static JLabel status = new JLabel();

        public Status(){
            setPreferredSize(new Dimension(600,35));
            setBackground(Color.GREEN);

            setLayout(new BorderLayout(5,5));

            JButton reset = new JButton();
            reset(reset);
            add(reset, BorderLayout.EAST);

            String statustxt = "Game is not started";
            status(status, statustxt);
            add(status, BorderLayout.WEST);

        }

        private void status(JLabel status, String statustxt){
            status.setName("LabelStatus");
            status.setText(statustxt);
            status.setBounds(2, 0, 100, 30);
        }

        private void reset(JButton reset){
            reset.setName("ButtonReset");
            reset.setText("Reset");
            reset.setFocusPainted(false);
            reset.setPreferredSize(new Dimension(75,30));
            reset.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    Board p = TicTacToe.getP();
                    p.RESET();
                    p.ENABLE();
                    Count.setCount(0);
                    status.setText("Game is not started");
                }
            });
        }

        public static JLabel getStatus() {
            return status;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/174/stages/899/implement#comment
status: Unchecked
record: -1
